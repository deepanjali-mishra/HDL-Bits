module top_module (
    input [3:0] x,
    input [3:0] y, 
    output [4:0] sum);
    wire [2:0] c;
 
    
    fa uut1(x[0],y[0],0,sum[0],c[0]);
    fa uut2(x[1],y[1],c[0],sum[1],c[1]);
    fa uut3(x[2],y[2],c[1],sum[2],c[2]);
    fa uut4(x[3],y[3],c[2],sum[3],sum[4]);
    
  
    

endmodule

module fa(a,b,c,sum,cout);
    input a,b,c;
    output sum,cout;
    assign sum = a^b^c;
    assign cout = (a&b)|(b&c)|(c&a);
endmodule

//Alternate

module top_module (
	input [3:0] x,
	input [3:0] y,
	output [4:0] sum
);

	// This circuit is a 4-bit ripple-carry adder with carry-out.
	assign sum = x+y;	// Verilog addition automatically produces the carry-out bit.

	// Verilog quirk: Even though the value of (x+y) includes the carry-out, (x+y) is still considered to be a 4-bit number (The max width of the two operands).
	// This is correct:
	// assign sum = (x+y);
	// But this is incorrect:
	// assign sum = {x+y};	// Concatenation operator: This discards the carry-out
endmodule
